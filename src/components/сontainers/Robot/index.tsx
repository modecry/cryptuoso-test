import React, { useContext } from "react"
import styled, { AnyStyledComponent } from "styled-components"
import Link from "next/link"
// material ui
import Typography from "@material-ui/core/Typography"
// enhancers
import { AppContext } from "enhancers/appContext"
// components
import ErrorComponent from "components/ErrorComponent"
import Loader from "components/Loader"
// types
import { AppContextTypes, RobotsModel, Statuses } from "contants/types/app"
// graphql
import useFetchRobot, { robotsdData } from "hooks/useFetchRobot"
// styles
import { Button, AbsoluteCentredContainer } from "components/styles/core"
// constnats
import { ERROR_MESSAGES } from "contants/ERROR_MESSAGES"

/**
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–±–æ—Ç–µ
 * @inter RobotContainerProps
 */
const RobotContainer: React.FunctionComponent<RobotContainerProps> = ({ robotId }: RobotContainerProps) => {
	const { state,setAppState }: AppContextTypes = useContext(AppContext) // –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	let currentRobots: Array<RobotsModel>| null = state.robots // –ø–æ–ª—É—á–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤ –∏–∑ —Å—Ç–µ–π—Ç–∞
	// –ò—â–µ–º –Ω—É–∂–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –ø–æ id
	const RobotInfo: RobotsModel| undefined = currentRobots?.find(item => item.id === robotId)

	/* –ï—Å–ª–∏ –æ—Ç—Å—Ç—É—Ç–≤—É—é—Ç —Ä–æ–±–æ—Ç—ã –≤ —Å—Ç–µ–π—Ç–µ*/
	if (!currentRobots) {
		const { loading, error, data }: robotsdData = useFetchRobot() // —Ñ–µ—Ç—á–∏–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—Ä–æ—Å–∞
		/* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è*/
		if (loading) {
			return <Loader />
		}
		if (error) {
			return <ErrorComponent message={ERROR_MESSAGES.ERROR} buttonPath="/" buttonText="–ù–∞ –≥–ª–∞–≤–Ω—É—é"/>
		}
		currentRobots = data.robots // –ø–æ–ª—É—á–∞–µ–º —Ä–æ–±–æ—Ç–æ–≤
		setAppState("robots",currentRobots) // –º–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	}

	/* –ï—Å–ª–∏ —Ä–æ–±–æ—Ç –Ω–∞–π–¥–µ–Ω*/
	if (RobotInfo) {
		const { code, status } = RobotInfo // –¥–µ—Å—Ç–∫—Ä—Ç—É—Ä–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞
		// –æ–±—ä—è–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
		return (
			<RobotInfoContainer>
				<Typography variant="h3" component="h3">{code} ü§ñ</Typography>
				<Typography variant="h4" component="h4">status: <StatusIcon status={Statuses[status]} /></Typography>
				<Link href="/">
					<Button variant="contained" color="primary">–ù–∞–∑–∞–¥</Button>
				</Link>
			</RobotInfoContainer>
		)
	}
	/* –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ä–æ–±–æ—Ç –ø–æ id –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏ */
	return <ErrorComponent message={ERROR_MESSAGES.NOT_FOUND_ROBOT} buttonText="–ù–∞–∑–∞–¥" buttonPath="/"/>
}


/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–∞—Ä–∞ Robot*/
interface RobotContainerProps{
	robotId: string
}

/* –°—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ä–æ–±–æ—Ç–∞ */
const RobotInfoContainer: AnyStyledComponent = styled(AbsoluteCentredContainer)`
	word-break: break-word;
`

const StatusIcon: AnyStyledComponent = styled.span`
	position: relative;
    top: 1px;
	display: inline-block;
	width: 22px;
	height: 22px;
	background-color: ${p => (p.status ? "#008000" : "#FF0000")};
	border-radius: 25px;

`

export default RobotContainer
